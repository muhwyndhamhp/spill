// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: companies.sql

package db

import (
	"context"
)

const createCompany = `-- name: CreateCompany :one
INSERT INTO companies(id, name, overall_score) VALUES($1, $2, 0.0) RETURNING id
`

type CreateCompanyParams struct {
	ID   int64
	Name string
}

func (q *Queries) CreateCompany(ctx context.Context, arg CreateCompanyParams) (int64, error) {
	row := q.db.QueryRow(ctx, createCompany, arg.ID, arg.Name)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const getCompanies = `-- name: GetCompanies :many
SELECT id, name, overall_score FROM companies ORDER BY id
`

func (q *Queries) GetCompanies(ctx context.Context) ([]Company, error) {
	rows, err := q.db.Query(ctx, getCompanies)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Company
	for rows.Next() {
		var i Company
		if err := rows.Scan(&i.ID, &i.Name, &i.OverallScore); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCompaniesByUserID = `-- name: GetCompaniesByUserID :many
SELECT companies.id, companies.name, companies.overall_score FROM companies_spill_users AS csu JOIN companies ON csu.company_id = companies.id WHERE csu.spill_user_id = $1 ORDER BY companies.id
`

func (q *Queries) GetCompaniesByUserID(ctx context.Context, spillUserID int64) ([]Company, error) {
	rows, err := q.db.Query(ctx, getCompaniesByUserID, spillUserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Company
	for rows.Next() {
		var i Company
		if err := rows.Scan(&i.ID, &i.Name, &i.OverallScore); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCompanyByID = `-- name: GetCompanyByID :one
SELECT id, name, overall_score FROM companies WHERE id = $1 LIMIT 1
`

func (q *Queries) GetCompanyByID(ctx context.Context, id int64) (Company, error) {
	row := q.db.QueryRow(ctx, getCompanyByID, id)
	var i Company
	err := row.Scan(&i.ID, &i.Name, &i.OverallScore)
	return i, err
}
