// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: spill_users.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createSpillUser = `-- name: CreateSpillUser :one
INSERT INTO spill_users(alias, service_id, bio, created_at, updated_at) VALUES ($1, $2, $3, $4, $5) RETURNING id
`

type CreateSpillUserParams struct {
	Alias     string
	ServiceID string
	Bio       pgtype.Text
	CreatedAt pgtype.Timestamptz
	UpdatedAt pgtype.Timestamptz
}

func (q *Queries) CreateSpillUser(ctx context.Context, arg CreateSpillUserParams) (int64, error) {
	row := q.db.QueryRow(ctx, createSpillUser,
		arg.Alias,
		arg.ServiceID,
		arg.Bio,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const getSpillUserByID = `-- name: GetSpillUserByID :one
SELECT id, alias, bio, created_at, updated_at, deleted_at, service_id FROM spill_users WHERE id = $1 LIMIT 1
`

func (q *Queries) GetSpillUserByID(ctx context.Context, id int64) (SpillUser, error) {
	row := q.db.QueryRow(ctx, getSpillUserByID, id)
	var i SpillUser
	err := row.Scan(
		&i.ID,
		&i.Alias,
		&i.Bio,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.ServiceID,
	)
	return i, err
}

const getSpillUserByServiceID = `-- name: GetSpillUserByServiceID :one
SELECT id, alias, bio, created_at, updated_at, deleted_at, service_id FROM spill_users WHERE service_id = $1 LIMIT 1
`

func (q *Queries) GetSpillUserByServiceID(ctx context.Context, serviceID string) (SpillUser, error) {
	row := q.db.QueryRow(ctx, getSpillUserByServiceID, serviceID)
	var i SpillUser
	err := row.Scan(
		&i.ID,
		&i.Alias,
		&i.Bio,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.ServiceID,
	)
	return i, err
}

const getSpillUsers = `-- name: GetSpillUsers :many
SELECT id, alias, bio, created_at, updated_at, deleted_at, service_id FROM spill_users ORDER BY id
`

func (q *Queries) GetSpillUsers(ctx context.Context) ([]SpillUser, error) {
	rows, err := q.db.Query(ctx, getSpillUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SpillUser
	for rows.Next() {
		var i SpillUser
		if err := rows.Scan(
			&i.ID,
			&i.Alias,
			&i.Bio,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.ServiceID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSpillUsersFromCompanyID = `-- name: GetSpillUsersFromCompanyID :many
SELECT u.id, u.alias, u.bio, u.created_at, u.updated_at, u.deleted_at, u.service_id FROM companies_spill_users AS csu JOIN spill_users AS u ON csu.spill_user_id = u.id WHERE csu.company_id = $1 ORDER BY u.id
`

func (q *Queries) GetSpillUsersFromCompanyID(ctx context.Context, companyID int64) ([]SpillUser, error) {
	rows, err := q.db.Query(ctx, getSpillUsersFromCompanyID, companyID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SpillUser
	for rows.Next() {
		var i SpillUser
		if err := rows.Scan(
			&i.ID,
			&i.Alias,
			&i.Bio,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.ServiceID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
